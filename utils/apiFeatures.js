class APIfeatures {
  constructor(query, queryString) {
    this.query = query;
    this.queryString = queryString;
  }

  filter() {
    // 1A- filtering
    const queryObj = { ...this.queryString };
    const excludedFields = ['page', 'sort', 'limit', 'fields']; // we need to exclude these fields from the request qurey when filtering
    excludedFields.forEach((el) => delete queryObj[el]);

    //1B- advanced filtering
    let queryStr = JSON.stringify(queryObj);
    queryStr = queryStr.replace(/\b(gte|gt|lte|lt)\b/g, (match) => `$${match}`); //here we gonna use regularexp to replace (lte) to ($lte) to use it while filtering the data
    //console.log(JSON.parse(queryStr));
    // another way for filtering getting the tours that has duration = 5 and difficulty = easy
    /*
      const query = Tour.find()
        .where('duration')
        .equals(5)
        .where('difficulty')
        .equals('easy');
        */

    this.query = this.query.find(JSON.parse(queryStr));
    return this;
  }

  sort() {
    //2- sorting
    if (this.queryString.sort) {
      /*
        the way that mongoose apply the multi sorting is .sort('price ratingsAverage') using SPACE between the sorting parameter 
        but at the api link SAPACES cannot be used so we split the sorting parameters by comma such as the minus to sort it by accending order
        (127.0.0.1:3000/api/v1/tours/?sort=price,-ratingsAverage)
        and then we remove it and add space by the code line below
        */
      const sortBy = this.queryString.sort.split(',').join(' ');
      this.query = this.query.sort(sortBy);
    } else {
      // defult sort we gonna sort it by the created date accendly by defult (the minus for the accending order)
      this.query = this.query.sort('-createdAt');
    }
    return this;
  }

  fieldsLimiting() {
    // 3- fields limiting or selecting
    if (this.queryString.fields) {
      const fields = this.queryString.fields.split(',').join(' ');
      this.query = this.query.select(fields);
    } else {
      this.query = this.query.select('-__v'); // (__v) field is generated by mongoose and we cannot delete it so we dont want to show it so we used the minus
    }
    return this;
  }

  pagination() {
    // 4- pagination
    const page = this.queryString.page * 1 || 1;
    const limit = this.queryString.limit * 1 || 100;
    const skip = (page - 1) * limit;

    this.query = this.query.skip(skip).limit(limit);
    return this;
  }
}

module.exports = APIfeatures;
